#include <omp.h>
#include <iostream>
#include <cstdlib>
#include <ctime>

#define N 1000
#define chunk 100
#define mostrar 10

void imprimeArreglo(float *d);

int main() {
    std::cout << "Sumando Arreglos en Paralelo!\n";
    float a[N], b[N], c[N];
    int i;

    // Generador de nÃºmeros aleatorios
    srand(static_cast<unsigned>(time(nullptr)));

    for (i = 0; i < N; i++) {
        a[i] = static_cast<float>(rand()) / (static_cast<float>(RAND_MAX/100));
        b[i] = static_cast<float>(rand()) / (static_cast<float>(RAND_MAX/100));
    }

    #pragma omp parallel for shared(a, b, c) private(i) schedule(static, chunk)
    for (i = 0; i < N; i++) {
        c[i] = a[i] + b[i];
    }

    std::cout << "Imprimiendo los primeros " << mostrar << " valores de cada arreglo:\n";
    std::cout << "Arreglo a:\n";
    imprimeArreglo(a);
    std::cout << "Arreglo b:\n";
    imprimeArreglo(b);
    std::cout << "Arreglo c:\n";
    imprimeArreglo(c);

    return 0;
}

void imprimeArreglo(float *d) {
    for (int x = 0; x < mostrar; x++) {
        std::cout << d[x] << " ";
    }
    std::cout << std::endl;
}
